// Generated by CoffeeScript 1.3.3
(function() {
  var ByRestart, EventEmitter, cp, fs, minimatch, path, spawn, util, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  EventEmitter = require('events').EventEmitter;

  path = require('path');

  util = require('util');

  _ = require('underscore');

  minimatch = require('minimatch');

  path = require('path');

  cp = require('child_process');

  spawn = cp.spawn;

  module.exports = ByRestart = (function(_super) {

    __extends(ByRestart, _super);

    function ByRestart(opts) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.opts = opts != null ? opts : {};
      this.coffee = (_ref = (_ref1 = this.opts) != null ? _ref1.coffee : void 0) != null ? _ref : false;
      this.command = (_ref2 = this.opts) != null ? _ref2.command : void 0;
      this.options = (_ref3 = (_ref4 = this.opts) != null ? _ref4.options : void 0) != null ? _ref3 : [];
      this.ignoreFiles = [];
      if (((_ref5 = this.opts) != null ? _ref5.ignoreFiles : void 0) != null) {
        this._setIgnoreFiles(this.opts.ignoreFiles);
      }
    }

    ByRestart.prototype._setListeners = function(bystander) {
      var _this = this;
      this.bystander = bystander;
      return this.bystander.on('File changed', function(file) {
        var extname;
        extname = path.extname(file);
        if ((_this.coffee && extname === '.coffee') || (!_this.coffee && extname === '.js')) {
          if (!_this._isIgnore(file)) {
            console.log(file + ' changed, restarting the server...');
            _this.ps.kill();
            return _this._run();
          }
        }
      });
    };

    ByRestart.prototype._init = function(callback) {
      return this._run(callback);
    };

    ByRestart.prototype._run = function(callback) {
      var _this = this;
      this.ps = spawn(this.command, this.options);
      this.ps.stdout.setEncoding('utf8');
      this.ps.stderr.setEncoding('utf8');
      this.ps.stdout.on('data', function(data) {
        return console.log(data);
      });
      this.ps.stderr.on('data', function(data) {
        return console.log(data);
      });
      this.ps.on('exit', function(code) {
        console.log('An error found, restarting the server...');
        _this.ps.kill();
        return _this._run();
      });
      return typeof callback === "function" ? callback() : void 0;
    };

    ByRestart.prototype._setIgnoreFiles = function(newFiles) {
      return this.ignoreFiles = _(this.ignoreFiles).union(newFiles);
    };

    ByRestart.prototype._isIgnore = function(file) {
      var v, _i, _len, _ref;
      _ref = this.ignoreFiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (minimatch(file, v, {
          dot: true
        })) {
          return true;
        }
      }
      return false;
    };

    return ByRestart;

  })(EventEmitter);

}).call(this);
